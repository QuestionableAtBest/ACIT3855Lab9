#Use docker-compose up -d in this file directory to start it up.
services:
  receiver:
    restart: always
    container_name: receiver
    build:
      context: ../receiver
      dockerfile: Dockerfile
    ports:
      - "8080-8089:8080"
    volumes:
      - type: bind
        source: ../logs/
        target: /app/logs/
      - type: bind
        source: ../configs/receiver/
        target: /app/configs/
    depends_on:
      - kafka
  storage:
    restart: always
    container_name: storage
    build:
      context: ../storage
      dockerfile: Dockerfile
    ports:
      - "8090-8099:8090"
    volumes:
      - type: bind
        source: ../logs/
        target: /app/logs/
      - type: bind
        source: ../configs/storage/
        target: /app/configs/
    depends_on:
      - db
      - kafka
  processing:
    restart: always
    container_name: processing
    build:
      context: ../processing
      dockerfile: Dockerfile
    ports:
      - "8100-8109:8100"
    environment:
      CORS_ALLOW_ALL: no
    volumes:
      - type: bind
        source: ../logs/
        target: /app/logs/
      - type: bind
        source: ../data/
        target: /app/data/
      - type: bind
        source: ../configs/processing/
        target: /app/configs/
    depends_on:
      - db
  analyzer:
    restart: always
    container_name: analyzer
    build:
      context: ../analyzer
      dockerfile: Dockerfile
    ports:
      - "8110-8119:8110"
    environment:
      CORS_ALLOW_ALL: no
    volumes:
      - type: bind
        source: ../logs/
        target: /app/logs/
      - type: bind
        source: ../configs/analyzer/
        target: /configs
    depends_on:
      - kafka
  consistency_check:
    restart: always
    container_name: consistency_check
    build:
      context: ../consistency_check
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ../data/
        target: /app/data/
      - type: bind
        source: ../logs/
        target: /app/logs/
      - type: bind
        source: ../configs/consistency_check/
        target: /app/configs/
    ports:
      - "8120-8129:8120"
    depends_on:
      - processing
      - analyzer
      - storage
  zookeeper:
    restart: always
    container_name: zookeeper
    image: wurstmeister/zookeeper
    volumes:
      - zookeeper_db:/data
  kafka:
    restart: always
    container_name: kafka
    image: wurstmeister/kafka
    command: bash -c "if [ -f /kafka/kafka-logs-kafka/meta.properties ]; then rm /kafka/kafka-logs-kafka/meta.properties; fi && start-kafka.sh"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../data/kafka/:/kafka
    depends_on:
      - "zookeeper"
  db:
    container_name: db
    image: mysql
    restart: always
    env_file: ".env"
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 1
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
    volumes:
      # Where our data will be persisted
      - ../data/database/:/var/lib/mysql
  
  nginx:
    restart: always
    container_name: nginx
    ports:
      - "80:80"
    build:
      context: ../dashboard
      dockerfile: Dockerfile
    depends_on:
      - processing
      - analyzer
      - storage
volumes:
  zookeeper_db: